<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Log;

class LoginTokenRequest extends Model
{
    use SerializesModels;

    public $incrementing = false;
    protected $keyType = 'string';
    protected $primaryKey = 'token';

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'logintokens';

    protected $fillable = [
        /** 32bit token */
        'token',

        /** scheme used for url */
        'scheme',

        /** base64 auth to be encrypted and returned to request */
        'base64_auth',

        /** user account country */
        'country',

        /** Has token been used */
        'used',
    ];

    /**
     * The model's default values for attributes.
     *
     * @var array
     */
    protected $attributes = [
        'token' => "",
        'scheme' => "",
        'base64_auth' => "",
        'country' => "",
        'used' => 0
    ];

    /**
     * The "booted" method of the model.
     */

     //What is this for??
//     protected static function booted(): void
//     {
//         static::creating(function (GenAIRequest $genAIRequest)
//         {
//             if (isset($genAIRequest->audioLocation))
//             {
//                 $audioLocation = $genAIRequest->audioLocation;
//                 $country = $genAIRequest->country;

//                 $transactionId = null;

//                 /* 0. parse audio url from request */
//                 $pattern = "/\/SCVmcServices\/rest\/transactions\/([^\/]+)\/audio/";

//                 if (preg_match($pattern, $audioLocation, $matches)) {
//                     $transactionId = $matches[1]; // Access the captured group
//                     $genAIRequest->valid = true;
//                 }

//                 $genAIRequest->trxId = $transactionId;
//                 $genAIRequest->submitTime = Carbon::now();
// //                $genAIRequest->audioUrl = config("app.nvoq_servers")[$country] . $audioLocation;


//                 // encrypt user authentication
//                 $value = $genAIRequest->userAuthString;
//                 $genAIRequest->userAuthString = Crypt::encrypt($value);

//             }
//         });
//     }

    public function __get($key)
    {
        $value = parent::__get($key); // TODO: Change the autogenerated stub

        if ($key === 'token' && $value) {
            try {
                $value = Crypt::decrypt($value);
            } catch (\Exception $e) {
                // Handle the exception if the decryption fails
                // no change return db value for compatibility of old data (remove later)
            }
        }

        return $value;
    }

    public static function findByToken(string $token, bool $includeDisabled = false) : LoginTokenRequest|null
    {
            return LoginTokenRequest::find($token);
    }

    public static function markTokenAsUsed(string $token, bool $includeDisabled = false) : Bool
    {
        try{
            $item = LoginTokenRequest::find($token);
            $item->used = true;       
            $item->save();
         }
         catch(\Exception $e){
            // do task when error
            Log::error($e->getMessage());
            return false;
         }
        return true;
    }
}
